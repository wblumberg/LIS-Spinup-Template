#!/usr/bin/env python
#------------------------------------------------------------------------------
# NASA/GSFC, Software Integration & Visualization Office, Code 610.3
#------------------------------------------------------------------------------
#
# SCRIPT:  lisWrfDomain.py
#
# AUTHOR:
# Eric Kemp, NASA SIVO/Northrop Grumman
#
# DESCRIPTION:
# Creates new lis.config file from existing file, changing the domain
# information to match an existing WRF domain.  Uses the lisWrfDomain
# Fortran program to extract the domain information from namelist.wps and
# netCDF output files from geogrid.exe.
#
# REVISION HISTORY:
# 20 May 2011 - First version, processed metgrid.exe output files.
# 01 Jun 2011 - Added logic to get absolute paths to files and programs.
# 17 Jul 2012 - New version for processing geogrid.exe files.
# ?? ??  2014 - Modified by J Jacob to support LIS 7 and LDT.
# 20 Oct 2014 - Added support for multiple nests.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Standard Python modules
#------------------------------------------------------------------------------

from __future__ import print_function
from builtins import range
import glob
import os
import subprocess
import sys

#------------------------------------------------------------------------------
# Function for printing out usage instructions for this script.
#------------------------------------------------------------------------------

def usage(argv0):
    """Prints usage of this script."""

    print("Usage:  %s DOMAINPROG LISCONFIG LDTCONFIG WPSDIR" %(argv0))
    print("    DOMAINPROG is the path to the lisWrfDomain executable.")
    print("    LISCONFIG is the path to the input lis.config file.")
    print("    LDTCONFIG is the path to the input ldt.config file.")
    print("    WPSDIR is the directory with a namelist.wps file and netCDF")
    print("        output from GEOGRID.")
    
#------------------------------------------------------------------------------
# Process command line arguments
#------------------------------------------------------------------------------

if len(sys.argv) != 5:
    print("ERROR processing command line arguments!")
    usage(sys.argv[0])
    raise SystemExit(1)

domainprog = os.path.abspath(sys.argv[1])
if not os.path.isfile(domainprog):
    print("ERROR, %s is not a valid file!" %(domainprog))
    usage(sys.argv[0])
    raise SystemExit(1)

lisconfig = os.path.abspath(sys.argv[2])
if not os.path.isfile(lisconfig):
    print("ERROR, %s is not a valid lis.config file!" %(lisconfig))
    usage(sys.argv[0])
    raise SystemExit(1)

ldtconfig = os.path.abspath(sys.argv[3])
if not os.path.isfile(ldtconfig):
    print("ERROR, %s is not a valid ldt.config file!" %(ldtconfig))
    usage(sys.argv[0])
    raise SystemExit(1)

wpsdir = os.path.abspath(sys.argv[4])
if not os.path.isdir(wpsdir):
    print("ERROR, %s is not a valid directory!" %(wpsdir))
    usage(sys.argv[0])
    raise SystemExit(1)

#------------------------------------------------------------------------------
# Move to WPS directory and make sure namelist.wps and GEOGRID netCDF files
# exist.
#------------------------------------------------------------------------------

os.chdir(wpsdir)
if not os.path.isfile("namelist.wps"):
    msg = "ERROR, file namelist.wps does not exist in %s!" %(wpsdir)
    msg += "\nCannot continue!"
    raise SystemExit(msg)

geogridfiles = glob.glob("geo_em*")
if len(geogridfiles) == 0:
    msg = "ERROR, no GEOGRID netCDF output files exist in %s!" %(wpsdir)
    msg += "\nCannot continue!"
    raise SystemExit(msg)

isfile = False
for geogridfile in geogridfiles:
    if os.path.isfile(geogridfile):
        isfile = True
        break

if not isfile:
    msg = "ERROR, no GEOGRID netcdf output files exist in %s!" %(wpsdir)
    msg += "\nCannot continue!"
    raise SystemExit(msg)

#------------------------------------------------------------------------------
# Now run the lisWrfDomain executable to generate domain table.
#------------------------------------------------------------------------------

cmd = "%s" %(domainprog)
args = [ cmd ]
returncode = subprocess.call(args)
if returncode != 0:
    raise SystemExit("ERROR returned from %s" %(domainprog))

if not os.path.isfile("domain_data"):
    raise SystemExit("ERROR, domain_data file not generated by %s" \
          %(domainprog))

#------------------------------------------------------------------------------
# Read in the entries from domain_data
#------------------------------------------------------------------------------

domain_data = {}
domain_data_used = {}
lines = open("domain_data").readlines()
for line in lines:
    (key,value) = line.split(":")
    tokens = key.split()
    newkey = ""
    for i in range(0,len(tokens)):
        newkey += "%s " %(tokens[i])
    newkey = newkey[:-1] + ":"
    domain_data[newkey] = value
    domain_data_used[newkey] = False

#------------------------------------------------------------------------------
# Now create a new lis.config file with the updated config information.
#------------------------------------------------------------------------------

output = open("%s.new" %(lisconfig),"w")
lines = open(lisconfig).readlines()
for line in lines:
    if ":" not in line:
        output.write(line)
    else:
        tokens = line.split(":")
        key_tokens = tokens[0].split()
        newkey = ""
        for i in range(0,len(key_tokens)):
            newkey += "%s " %(key_tokens[i])
        newkey = newkey[:-1] + ":"
        if newkey in list(domain_data.keys()):
            newline = "%s %s" %(newkey,domain_data[newkey])
            output.write(newline)
            domain_data_used[newkey] = True
        else:
            output.write(line)
output.close()
#------------------------------------------------------------------------------
# Now create a new ldt.config file with the updated config information.
#------------------------------------------------------------------------------

output = open("%s.new" %(ldtconfig),"w")
lines = open(ldtconfig).readlines()
for line in lines:
    if ":" not in line:
        output.write(line)
    else:
        tokens = line.split(":")
        key_tokens = tokens[0].split()
        newkey = ""
        for i in range(0,len(key_tokens)):
            newkey += "%s " %(key_tokens[i])
        newkey = newkey[:-1] + ":"
        if newkey in list(domain_data.keys()):
            newline = "%s %s" %(newkey,domain_data[newkey])
            output.write(newline)
            domain_data_used[newkey] = True
        else:
            output.write(line)
output.close()

#Check if any domain_data keys were skipped.
keys = list(domain_data_used.keys())
keys.sort()
problem = False
for key in keys:
    if not domain_data_used[key]:
        print("ERROR, '%s' was not written to config files!" %(key))
        problem=True
if problem:
    print("Edit input config templates to add missing entries and try again!")
    raise SystemExit(1)

print('LISCONFIG software run completed.\n')

print('CAUTION: Further edits to lis.config.new and ldt.config.new may be ')
print('needed to address input data selections, physics, etc.')
